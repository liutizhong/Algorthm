from __future__ import divisionfrom collections import defaultdict, Counterimport re as regeximport  random__author__ = 'liutizhong''''for i in [1, 2, 3, 4, 5, 6]:    print i    for j in [1, 2, 3, 4, 5]:        print j        print i+j    print iprint "done loop"'''my_regex = regex.compile("[0-9]+", regex.I)lookup = defaultdict(int)my_counter = Counter()def double(x):    return x * 2def apply_to_one(f):    return f(1)my_double = doublex = apply_to_one(my_double)y = apply_to_one(lambda n: n + 4)print x, y        #result: 2  5def another_double(m):    return 2 * mdef my_print(message="my default message"):    print messagemy_print("hello")def subtract(a=0, b=0):    return a - bprint subtract(10, 5)  # 5print subtract(0, 5)   # -5print subtract(b=5)    # -5my_list = [1, 2]my_tuple = (1, 2)other_tuple = 3, 4my_list[1] =3  #my_list is now [1, 3]integer_list = [1, 2, 3]heterogeeous_list = ["string", 0.1, True]list_of_lists = [integer_list, heterogeeous_list, []]list_length = len(integer_list) #equals 3list_sum = sum(integer_list) #equalsempty_dict = {}empty_dict2 = dict()grades = {"Joel": 80, "Tim": 95}joel_grade = grades["Joel"]try:    kates_grade = grades["Kate"]except KeyError:    print "no grade for Kate!"joel_has_grade = "Joel" in gradeskates_has_grade = "Kate" in grades#print joel_has_grade#print kates_has_gradejoels_grade = grades.get("Joel", 0)kates_grade = grades.get("Kate", 0)no_one_grade = grades.get("No one")#print joels_grade, kates_grade, no_one_gradegrades["Tim"] = 99grades["Kate"] = 100num_students = len(grades)#print grades#print num_studentstweet = {    "user" : "joelgrus",    "text" : "Data Science is Awesome",    "retweet_count" : 100,    "hashtags" : ["#data", "#science", "#datascience", "#awesome", "#yolo"]}tweet_key = tweet.keys()tweet_values = tweet.values()tweet_items = tweet.items()"user" in tweet_key"user" in tweet"joelgrus" in tweet_valuesdd_list =defaultdict(list)dd_list[2].append(1)dd_dict=defaultdict(dict)dd_dict["Joel"]["City"] = "Seattle"dd_pair = defaultdict(lambda: [0, 0])dd_pair[2][1] = 1even_numbers = [x for x in range(5) if x % 2 ==0]squares = [x * x for x in range(5)]even_squares = [x * x for x in even_numbers]#print even_numbers#print squares#print even_squaressquare_dict = { x : x * x for x in range(5)}square_set = {x * x for x in [1, -1]}#print square_dictpairs = {(x, y)         for x in range(10)         for y in range(10)}#print pairsincreasing_pair = [(x, y)                   for x in range(10)                   for y in range(x+1, 10)]#print increasing_pairdef lazy_range(n):    i = 0    while i < n:        yield i        i += 1lazy_evens_below_20 = (i for i in lazy_range(20) if i % 2 == 0)print lazy_evens_below_20four_uniform_randoms = [random.random() for _ in range(4)]print four_uniform_randoms